{"version":3,"sources":["/src/post/post/post.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAAuE;AAGvE,8CAA6C;AAE7C,mBAAmB;AAEnB,iCAA+B;AAC/B,mCAAgC;AAGhC,IAAa,WAAW;IAGpB,qBAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFvB,YAAO,GAAG,iCAAiC,CAAC;QAQ5C,kBAAa,GAAG,EAAE,CAAC;IANO,CAAC;IAEnC,6BAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;aACjC,GAAG,CAAE,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAC7B,CAAC;IAGF,8BAAQ,GAAR,UAAS,KAAY,EAAE,IAAW;QACjC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,GAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;QAC3E,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAC,OAAO,EAAC,OAAO,EAAC,CAAC,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CACH,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAC,KAAK,EAAE,MAAM,EAAC,IAAI,EAAE,CAAC,EAC9C,OAAO,CACR;aACA,GAAG,CAAC,UAAA,GAAG;YACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;YAC1B,IAAI,OAAO,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;YAC/C,EAAE,CAAA,CAAC,OAAO,CAAC,CAAA,CAAC;gBACV,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAAA,IAAI,CAAA,CAAC;gBACJ,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QAEH,CAAC,CAAC;aAED,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAGO,iCAAW,GAAnB,UAAoB,KAAsB;QACxC,IAAI,MAAa,CAAC;QAClB,EAAE,CAAA,CAAC,KAAK,YAAY,eAAQ,CAAC,CAAA,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;QAChE,CAAC;QAAA,IAAI,CAAA,CAAC;YACJ,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC5D,CAAC;QACF,uBAAuB;QACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEH,kBAAC;AAAD,CAlDA,AAkDC,IAAA;AAlDY,WAAW;IADvB,iBAAU,EAAE;qCAIkB,WAAI;GAHtB,WAAW,CAkDvB;AAlDY,kCAAW","file":"post.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response , Headers,RequestOptions} from '@angular/http';\n\nimport { Post } from './post';\nimport { Observable } from 'rxjs/Observable';\n\n//import operators.\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch'\n\n@Injectable()\nexport class PostService{\n    private postUrl = 'http://localhost:8080/api/posts';\n\n    constructor (private http: Http) {}\n\n    getPost () : Observable<Post[]>{\n        return this.http.get(this.postUrl)\n        .map( res => res.json());\n    }\n    private statusMessage = \"\";\n\n   postPost(title:string, body:string) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    headers.append('Authorization', 'JWT '+localStorage.getItem('auth_token'));\n    let options = new RequestOptions({headers:headers});\n    return this.http\n      .post(\n        this.postUrl, \n        JSON.stringify({ 'title':title, 'body':body }), \n        options\n      )\n      .map(res => {\n          console.log(res.json());\n        let message = res.json() && res.json().message;\n        if(message){\n          return true;\n        }else{\n          return false;\n        }\n        \n      })\n      \n      .catch(this.handleError);\n  }\n\n\n  private handleError(error : Response | any){\n    let errMsg:String;\n    if(error instanceof Response){\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    }else{\n      errMsg = error.message ? error.message : error.toString();\n    }\n   // console.log(errMsg);\n    return Observable.throw(errMsg);\n  }\n   \n}"]}