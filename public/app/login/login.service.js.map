{"version":3,"sources":["/src/login/login/login.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAAuD;AACvD,8CAA0C;AAC1C,mCAAiC;AACjC,qCAAmC;AAGnC,IAAa,YAAY;IAIvB,sBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAHtB,aAAQ,GAAG,KAAK,CAAC;QACf,aAAQ,GAAG,iCAAiC,CAAC;QAGrD,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC;IAEH,4BAAK,GAAL,UAAM,QAAe,EAAE,QAAe;QAAtC,iBAwBG;QAvBC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CACH,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,EAAC,QAAQ,EAAE,UAAU,EAAC,QAAQ,EAAE,CAAC,EAC5D,EAAE,OAAO,SAAA,EAAE,CACZ;aACA,GAAG,CAAC,UAAA,GAAG;YACN,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;YAC3C,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;gBACN,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;gBACvD,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAAA,IAAI,CAAA,CAAC;gBACJ,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QAEH,CAAC,CAAC;aAED,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IACD,6BAAM,GAAN;QACE,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,iCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEO,kCAAW,GAAnB,UAAoB,KAAsB;QACxC,IAAI,MAAa,CAAC;QAClB,EAAE,CAAA,CAAC,KAAK,YAAY,eAAQ,CAAC,CAAA,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;QAChE,CAAC;QAAA,IAAI,CAAA,CAAC;YACJ,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC5D,CAAC;QACF,uBAAuB;QACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEH,mBAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDY,YAAY;IADxB,iBAAU,EAAE;qCAKe,WAAI;GAJnB,YAAY,CAwDxB;AAxDY,oCAAY","file":"login.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers,Response } from '@angular/http';\nimport {Observable} from 'rxjs/Observable'\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\n\n@Injectable()\nexport class LoginService {\n  private loggedIn = false;\n    private loginUrl = 'http://localhost:8080/api/login';\n\n  constructor(private http: Http) {\n    this.loggedIn = !!localStorage.getItem('auth_token');\n  }\n\nlogin(username:string, password:string) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    return this.http\n      .post(\n        this.loginUrl, \n        JSON.stringify({ 'username':username, 'password':password }), \n        { headers }\n      )\n      .map(res => {\n        let token = res.json() && res.json().token;\n        if(token){\n            localStorage.setItem('auth_token', res.json().token);\n          this.loggedIn = true;\n          return true;\n        }else{\n          this.loggedIn = false;\n          return false;\n        }\n        \n      })\n      \n      .catch(this.handleError);\n  }\n  logout() {\n    localStorage.removeItem('auth_token');\n    this.loggedIn = false;\n    return true;\n  }\n\n  isLoggedIn() {\n    return this.loggedIn;\n  }\n\n  private handleError(error : Response | any){\n    let errMsg:String;\n    if(error instanceof Response){\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    }else{\n      errMsg = error.message ? error.message : error.toString();\n    }\n   // console.log(errMsg);\n    return Observable.throw(errMsg);\n  }\n\n}\n"]}